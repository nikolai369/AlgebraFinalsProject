//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EventPlannerApp.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EventPlannerDBEntities : DbContext
    {
        public EventPlannerDBEntities()
            : base("name=EventPlannerDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Admin> Admin { get; set; }
        public virtual DbSet<AvailableFunds> AvailableFunds { get; set; }
        public virtual DbSet<CreditCard> CreditCard { get; set; }
        public virtual DbSet<Event> Event { get; set; }
        public virtual DbSet<EventHost> EventHost { get; set; }
        public virtual DbSet<EventStatistics> EventStatistics { get; set; }
        public virtual DbSet<Location> Location { get; set; }
        public virtual DbSet<PlaceOfEvent> PlaceOfEvent { get; set; }
        public virtual DbSet<Review> Review { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Ticket> Ticket { get; set; }
        public virtual DbSet<Transaction> Transaction { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<WebPageStatistics> WebPageStatistics { get; set; }
    
        public virtual int clean_eventplannerdb()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("clean_eventplannerdb");
        }
    
        public virtual int delete_event(Nullable<int> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delete_event", eventIDParameter);
        }
    
        public virtual int delete_host(Nullable<int> eventHostID)
        {
            var eventHostIDParameter = eventHostID.HasValue ?
                new ObjectParameter("EventHostID", eventHostID) :
                new ObjectParameter("EventHostID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delete_host", eventHostIDParameter);
        }
    
        public virtual int delete_location(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delete_location", locationIDParameter);
        }
    
        public virtual int delete_placeofevent(Nullable<int> placeOfEventID)
        {
            var placeOfEventIDParameter = placeOfEventID.HasValue ?
                new ObjectParameter("PlaceOfEventID", placeOfEventID) :
                new ObjectParameter("PlaceOfEventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delete_placeofevent", placeOfEventIDParameter);
        }
    
        public virtual int delete_ticket(Nullable<int> ticketID)
        {
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("TicketID", ticketID) :
                new ObjectParameter("TicketID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delete_ticket", ticketIDParameter);
        }
    
        public virtual int delete_transaction(Nullable<int> transacitionID)
        {
            var transacitionIDParameter = transacitionID.HasValue ?
                new ObjectParameter("TransacitionID", transacitionID) :
                new ObjectParameter("TransacitionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delete_transaction", transacitionIDParameter);
        }
    
        public virtual int delete_user(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delete_user", userIDParameter);
        }
    
        public virtual int insert_dummy_data()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_dummy_data");
        }
    
        public virtual int insert_event(string eventName, Nullable<System.DateTime> dateOfEvent, Nullable<System.TimeSpan> timeOfStart, Nullable<System.TimeSpan> timeOfEnd, string info, Nullable<int> iDLocation, Nullable<int> iDEventHost, Nullable<int> iDPlaceOfEvent, Nullable<int> iDEventStatistics, Nullable<int> iDTicket)
        {
            var eventNameParameter = eventName != null ?
                new ObjectParameter("EventName", eventName) :
                new ObjectParameter("EventName", typeof(string));
    
            var dateOfEventParameter = dateOfEvent.HasValue ?
                new ObjectParameter("DateOfEvent", dateOfEvent) :
                new ObjectParameter("DateOfEvent", typeof(System.DateTime));
    
            var timeOfStartParameter = timeOfStart.HasValue ?
                new ObjectParameter("TimeOfStart", timeOfStart) :
                new ObjectParameter("TimeOfStart", typeof(System.TimeSpan));
    
            var timeOfEndParameter = timeOfEnd.HasValue ?
                new ObjectParameter("TimeOfEnd", timeOfEnd) :
                new ObjectParameter("TimeOfEnd", typeof(System.TimeSpan));
    
            var infoParameter = info != null ?
                new ObjectParameter("Info", info) :
                new ObjectParameter("Info", typeof(string));
    
            var iDLocationParameter = iDLocation.HasValue ?
                new ObjectParameter("IDLocation", iDLocation) :
                new ObjectParameter("IDLocation", typeof(int));
    
            var iDEventHostParameter = iDEventHost.HasValue ?
                new ObjectParameter("IDEventHost", iDEventHost) :
                new ObjectParameter("IDEventHost", typeof(int));
    
            var iDPlaceOfEventParameter = iDPlaceOfEvent.HasValue ?
                new ObjectParameter("IDPlaceOfEvent", iDPlaceOfEvent) :
                new ObjectParameter("IDPlaceOfEvent", typeof(int));
    
            var iDEventStatisticsParameter = iDEventStatistics.HasValue ?
                new ObjectParameter("IDEventStatistics", iDEventStatistics) :
                new ObjectParameter("IDEventStatistics", typeof(int));
    
            var iDTicketParameter = iDTicket.HasValue ?
                new ObjectParameter("IDTicket", iDTicket) :
                new ObjectParameter("IDTicket", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_event", eventNameParameter, dateOfEventParameter, timeOfStartParameter, timeOfEndParameter, infoParameter, iDLocationParameter, iDEventHostParameter, iDPlaceOfEventParameter, iDEventStatisticsParameter, iDTicketParameter);
        }
    
        public virtual int insert_funds(Nullable<decimal> availableMoney)
        {
            var availableMoneyParameter = availableMoney.HasValue ?
                new ObjectParameter("AvailableMoney", availableMoney) :
                new ObjectParameter("AvailableMoney", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_funds", availableMoneyParameter);
        }
    
        public virtual int insert_host(string email, string password, string firstName, string lastName, string iBAN, string info, Nullable<int> iDAvailableFunds)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var iBANParameter = iBAN != null ?
                new ObjectParameter("IBAN", iBAN) :
                new ObjectParameter("IBAN", typeof(string));
    
            var infoParameter = info != null ?
                new ObjectParameter("Info", info) :
                new ObjectParameter("Info", typeof(string));
    
            var iDAvailableFundsParameter = iDAvailableFunds.HasValue ?
                new ObjectParameter("IDAvailableFunds", iDAvailableFunds) :
                new ObjectParameter("IDAvailableFunds", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_host", emailParameter, passwordParameter, firstNameParameter, lastNameParameter, iBANParameter, infoParameter, iDAvailableFundsParameter);
        }
    
        public virtual int insert_location(string state, string city, string streetName, System.Data.Entity.Spatial.DbGeography coordinates)
        {
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var coordinatesParameter = coordinates != null ?
                new ObjectParameter("Coordinates", coordinates) :
                new ObjectParameter("Coordinates", typeof(System.Data.Entity.Spatial.DbGeography));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_location", stateParameter, cityParameter, streetNameParameter, coordinatesParameter);
        }
    
        public virtual int insert_placeofevent(string placeName, string info, Nullable<int> iDReview, Nullable<int> iDEventHost)
        {
            var placeNameParameter = placeName != null ?
                new ObjectParameter("PlaceName", placeName) :
                new ObjectParameter("PlaceName", typeof(string));
    
            var infoParameter = info != null ?
                new ObjectParameter("Info", info) :
                new ObjectParameter("Info", typeof(string));
    
            var iDReviewParameter = iDReview.HasValue ?
                new ObjectParameter("IDReview", iDReview) :
                new ObjectParameter("IDReview", typeof(int));
    
            var iDEventHostParameter = iDEventHost.HasValue ?
                new ObjectParameter("IDEventHost", iDEventHost) :
                new ObjectParameter("IDEventHost", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_placeofevent", placeNameParameter, infoParameter, iDReviewParameter, iDEventHostParameter);
        }
    
        public virtual int insert_review(string info, Nullable<System.DateTime> dateMade, Nullable<int> score, Nullable<int> iDUser)
        {
            var infoParameter = info != null ?
                new ObjectParameter("Info", info) :
                new ObjectParameter("Info", typeof(string));
    
            var dateMadeParameter = dateMade.HasValue ?
                new ObjectParameter("DateMade", dateMade) :
                new ObjectParameter("DateMade", typeof(System.DateTime));
    
            var scoreParameter = score.HasValue ?
                new ObjectParameter("Score", score) :
                new ObjectParameter("Score", typeof(int));
    
            var iDUserParameter = iDUser.HasValue ?
                new ObjectParameter("IDUser", iDUser) :
                new ObjectParameter("IDUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_review", infoParameter, dateMadeParameter, scoreParameter, iDUserParameter);
        }
    
        public virtual int insert_ticket(Nullable<decimal> priceInKunas, string info, string qRCode)
        {
            var priceInKunasParameter = priceInKunas.HasValue ?
                new ObjectParameter("PriceInKunas", priceInKunas) :
                new ObjectParameter("PriceInKunas", typeof(decimal));
    
            var infoParameter = info != null ?
                new ObjectParameter("Info", info) :
                new ObjectParameter("Info", typeof(string));
    
            var qRCodeParameter = qRCode != null ?
                new ObjectParameter("QRCode", qRCode) :
                new ObjectParameter("QRCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_ticket", priceInKunasParameter, infoParameter, qRCodeParameter);
        }
    
        public virtual int insert_transaction(Nullable<System.DateTime> timeOfPurchase, string info, Nullable<int> iDTicket, Nullable<int> iDUser)
        {
            var timeOfPurchaseParameter = timeOfPurchase.HasValue ?
                new ObjectParameter("TimeOfPurchase", timeOfPurchase) :
                new ObjectParameter("TimeOfPurchase", typeof(System.DateTime));
    
            var infoParameter = info != null ?
                new ObjectParameter("Info", info) :
                new ObjectParameter("Info", typeof(string));
    
            var iDTicketParameter = iDTicket.HasValue ?
                new ObjectParameter("IDTicket", iDTicket) :
                new ObjectParameter("IDTicket", typeof(int));
    
            var iDUserParameter = iDUser.HasValue ?
                new ObjectParameter("IDUser", iDUser) :
                new ObjectParameter("IDUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_transaction", timeOfPurchaseParameter, infoParameter, iDTicketParameter, iDUserParameter);
        }
    
        public virtual int insert_user(string email, string password, string firstName, string lastName, Nullable<int> age, Nullable<int> iDCreditCard, Nullable<int> iDAvailableFunds)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var iDCreditCardParameter = iDCreditCard.HasValue ?
                new ObjectParameter("IDCreditCard", iDCreditCard) :
                new ObjectParameter("IDCreditCard", typeof(int));
    
            var iDAvailableFundsParameter = iDAvailableFunds.HasValue ?
                new ObjectParameter("IDAvailableFunds", iDAvailableFunds) :
                new ObjectParameter("IDAvailableFunds", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_user", emailParameter, passwordParameter, firstNameParameter, lastNameParameter, ageParameter, iDCreditCardParameter, iDAvailableFundsParameter);
        }
    
        public virtual ObjectResult<select_all_events_Result> select_all_events()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_all_events_Result>("select_all_events");
        }
    
        public virtual ObjectResult<select_all_hosts_events_Result> select_all_hosts_events(Nullable<int> eventHostID)
        {
            var eventHostIDParameter = eventHostID.HasValue ?
                new ObjectParameter("EventHostID", eventHostID) :
                new ObjectParameter("EventHostID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_all_hosts_events_Result>("select_all_hosts_events", eventHostIDParameter);
        }
    
        public virtual ObjectResult<select_all_hosts_placeofevent_Result> select_all_hosts_placeofevent(Nullable<int> eventHostID)
        {
            var eventHostIDParameter = eventHostID.HasValue ?
                new ObjectParameter("EventHostID", eventHostID) :
                new ObjectParameter("EventHostID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_all_hosts_placeofevent_Result>("select_all_hosts_placeofevent", eventHostIDParameter);
        }
    
        public virtual ObjectResult<select_all_reviews_by_user_id_Result> select_all_reviews_by_user_id(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_all_reviews_by_user_id_Result>("select_all_reviews_by_user_id", userIDParameter);
        }
    
        public virtual ObjectResult<select_event_info_Result> select_event_info(Nullable<int> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_event_info_Result>("select_event_info", eventIDParameter);
        }
    
        public virtual ObjectResult<select_event_location_Result> select_event_location(Nullable<int> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_event_location_Result>("select_event_location", eventIDParameter);
        }
    
        public virtual ObjectResult<select_event_statistics_by_host_Result> select_event_statistics_by_host(Nullable<int> eventHostID)
        {
            var eventHostIDParameter = eventHostID.HasValue ?
                new ObjectParameter("EventHostID", eventHostID) :
                new ObjectParameter("EventHostID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_event_statistics_by_host_Result>("select_event_statistics_by_host", eventHostIDParameter);
        }
    
        public virtual ObjectResult<select_host_account_balance_Result> select_host_account_balance(Nullable<int> eventHostID)
        {
            var eventHostIDParameter = eventHostID.HasValue ?
                new ObjectParameter("EventHostID", eventHostID) :
                new ObjectParameter("EventHostID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_host_account_balance_Result>("select_host_account_balance", eventHostIDParameter);
        }
    
        public virtual ObjectResult<select_host_by_event_Result> select_host_by_event(Nullable<int> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_host_by_event_Result>("select_host_by_event", eventIDParameter);
        }
    
        public virtual ObjectResult<select_host_info_Result> select_host_info(Nullable<int> eventHostID)
        {
            var eventHostIDParameter = eventHostID.HasValue ?
                new ObjectParameter("EventHostID", eventHostID) :
                new ObjectParameter("EventHostID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_host_info_Result>("select_host_info", eventHostIDParameter);
        }
    
        public virtual ObjectResult<select_location_info_Result> select_location_info(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_location_info_Result>("select_location_info", locationIDParameter);
        }
    
        public virtual ObjectResult<select_review_by_user_Result> select_review_by_user(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_review_by_user_Result>("select_review_by_user", userIDParameter);
        }
    
        public virtual ObjectResult<select_review_for_placeofevent_Result> select_review_for_placeofevent(Nullable<int> placeOfEventID)
        {
            var placeOfEventIDParameter = placeOfEventID.HasValue ?
                new ObjectParameter("PlaceOfEventID", placeOfEventID) :
                new ObjectParameter("PlaceOfEventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_review_for_placeofevent_Result>("select_review_for_placeofevent", placeOfEventIDParameter);
        }
    
        public virtual ObjectResult<select_ticket_Result> select_ticket(Nullable<int> ticketID)
        {
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("TicketID", ticketID) :
                new ObjectParameter("TicketID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_ticket_Result>("select_ticket", ticketIDParameter);
        }
    
        public virtual ObjectResult<select_ticket_info_for_event_Result> select_ticket_info_for_event(Nullable<int> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_ticket_info_for_event_Result>("select_ticket_info_for_event", eventIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> select_user_account_balance(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("select_user_account_balance", userIDParameter);
        }
    
        public virtual ObjectResult<select_user_info_Result> select_user_info(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_user_info_Result>("select_user_info", userIDParameter);
        }
    
        public virtual ObjectResult<select_user_transactions_Result> select_user_transactions(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_user_transactions_Result>("select_user_transactions", userIDParameter);
        }
    
        public virtual ObjectResult<select_webpage_statistics_Result> select_webpage_statistics()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_webpage_statistics_Result>("select_webpage_statistics");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int update_event(Nullable<int> eventID, string eventName, Nullable<System.DateTime> dateOfEvent, Nullable<System.TimeSpan> timeOfStart, Nullable<System.TimeSpan> timeOfEnd, string info, Nullable<int> iDLocation, Nullable<int> iDEventHost, Nullable<int> iDPlaceOfEvent, Nullable<int> iDEventStatistics, Nullable<int> iDTicket)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var eventNameParameter = eventName != null ?
                new ObjectParameter("EventName", eventName) :
                new ObjectParameter("EventName", typeof(string));
    
            var dateOfEventParameter = dateOfEvent.HasValue ?
                new ObjectParameter("DateOfEvent", dateOfEvent) :
                new ObjectParameter("DateOfEvent", typeof(System.DateTime));
    
            var timeOfStartParameter = timeOfStart.HasValue ?
                new ObjectParameter("TimeOfStart", timeOfStart) :
                new ObjectParameter("TimeOfStart", typeof(System.TimeSpan));
    
            var timeOfEndParameter = timeOfEnd.HasValue ?
                new ObjectParameter("TimeOfEnd", timeOfEnd) :
                new ObjectParameter("TimeOfEnd", typeof(System.TimeSpan));
    
            var infoParameter = info != null ?
                new ObjectParameter("Info", info) :
                new ObjectParameter("Info", typeof(string));
    
            var iDLocationParameter = iDLocation.HasValue ?
                new ObjectParameter("IDLocation", iDLocation) :
                new ObjectParameter("IDLocation", typeof(int));
    
            var iDEventHostParameter = iDEventHost.HasValue ?
                new ObjectParameter("IDEventHost", iDEventHost) :
                new ObjectParameter("IDEventHost", typeof(int));
    
            var iDPlaceOfEventParameter = iDPlaceOfEvent.HasValue ?
                new ObjectParameter("IDPlaceOfEvent", iDPlaceOfEvent) :
                new ObjectParameter("IDPlaceOfEvent", typeof(int));
    
            var iDEventStatisticsParameter = iDEventStatistics.HasValue ?
                new ObjectParameter("IDEventStatistics", iDEventStatistics) :
                new ObjectParameter("IDEventStatistics", typeof(int));
    
            var iDTicketParameter = iDTicket.HasValue ?
                new ObjectParameter("IDTicket", iDTicket) :
                new ObjectParameter("IDTicket", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_event", eventIDParameter, eventNameParameter, dateOfEventParameter, timeOfStartParameter, timeOfEndParameter, infoParameter, iDLocationParameter, iDEventHostParameter, iDPlaceOfEventParameter, iDEventStatisticsParameter, iDTicketParameter);
        }
    
        public virtual int update_funds(Nullable<int> availableFundsID, Nullable<decimal> availableMoney)
        {
            var availableFundsIDParameter = availableFundsID.HasValue ?
                new ObjectParameter("AvailableFundsID", availableFundsID) :
                new ObjectParameter("AvailableFundsID", typeof(int));
    
            var availableMoneyParameter = availableMoney.HasValue ?
                new ObjectParameter("AvailableMoney", availableMoney) :
                new ObjectParameter("AvailableMoney", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_funds", availableFundsIDParameter, availableMoneyParameter);
        }
    
        public virtual int update_host(Nullable<int> eventHostID, string email, string password, string firstName, string lastName, string iBAN, string info, Nullable<int> iDAvailableFunds)
        {
            var eventHostIDParameter = eventHostID.HasValue ?
                new ObjectParameter("EventHostID", eventHostID) :
                new ObjectParameter("EventHostID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var iBANParameter = iBAN != null ?
                new ObjectParameter("IBAN", iBAN) :
                new ObjectParameter("IBAN", typeof(string));
    
            var infoParameter = info != null ?
                new ObjectParameter("Info", info) :
                new ObjectParameter("Info", typeof(string));
    
            var iDAvailableFundsParameter = iDAvailableFunds.HasValue ?
                new ObjectParameter("IDAvailableFunds", iDAvailableFunds) :
                new ObjectParameter("IDAvailableFunds", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_host", eventHostIDParameter, emailParameter, passwordParameter, firstNameParameter, lastNameParameter, iBANParameter, infoParameter, iDAvailableFundsParameter);
        }
    
        public virtual int update_location(Nullable<int> locationID, string state, string city, string streetName, System.Data.Entity.Spatial.DbGeography coordinates)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var coordinatesParameter = coordinates != null ?
                new ObjectParameter("Coordinates", coordinates) :
                new ObjectParameter("Coordinates", typeof(System.Data.Entity.Spatial.DbGeography));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_location", locationIDParameter, stateParameter, cityParameter, streetNameParameter, coordinatesParameter);
        }
    
        public virtual int update_placeofevent(Nullable<int> placeOfEventID, string placeName, string info, Nullable<int> iDReview, Nullable<int> iDEventHost)
        {
            var placeOfEventIDParameter = placeOfEventID.HasValue ?
                new ObjectParameter("PlaceOfEventID", placeOfEventID) :
                new ObjectParameter("PlaceOfEventID", typeof(int));
    
            var placeNameParameter = placeName != null ?
                new ObjectParameter("PlaceName", placeName) :
                new ObjectParameter("PlaceName", typeof(string));
    
            var infoParameter = info != null ?
                new ObjectParameter("Info", info) :
                new ObjectParameter("Info", typeof(string));
    
            var iDReviewParameter = iDReview.HasValue ?
                new ObjectParameter("IDReview", iDReview) :
                new ObjectParameter("IDReview", typeof(int));
    
            var iDEventHostParameter = iDEventHost.HasValue ?
                new ObjectParameter("IDEventHost", iDEventHost) :
                new ObjectParameter("IDEventHost", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_placeofevent", placeOfEventIDParameter, placeNameParameter, infoParameter, iDReviewParameter, iDEventHostParameter);
        }
    
        public virtual int update_transaction(Nullable<int> transactionID, Nullable<System.DateTime> timeOfPurchase, string info, Nullable<int> iDTicket, Nullable<int> iDUser)
        {
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(int));
    
            var timeOfPurchaseParameter = timeOfPurchase.HasValue ?
                new ObjectParameter("TimeOfPurchase", timeOfPurchase) :
                new ObjectParameter("TimeOfPurchase", typeof(System.DateTime));
    
            var infoParameter = info != null ?
                new ObjectParameter("Info", info) :
                new ObjectParameter("Info", typeof(string));
    
            var iDTicketParameter = iDTicket.HasValue ?
                new ObjectParameter("IDTicket", iDTicket) :
                new ObjectParameter("IDTicket", typeof(int));
    
            var iDUserParameter = iDUser.HasValue ?
                new ObjectParameter("IDUser", iDUser) :
                new ObjectParameter("IDUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_transaction", transactionIDParameter, timeOfPurchaseParameter, infoParameter, iDTicketParameter, iDUserParameter);
        }
    
        public virtual int update_user(Nullable<int> userID, string email, string password, string firstName, string lastname, Nullable<int> age)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_user", userIDParameter, emailParameter, passwordParameter, firstNameParameter, lastnameParameter, ageParameter);
        }
    }
}
