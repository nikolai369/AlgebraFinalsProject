{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\rokgr\\\\Desktop\\\\EventPlannerFrontend\\\\navigation\\\\Routes.js\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport React, { useEffect, useContext, useState } from \"react\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { AuthContext } from \"../providers/AuthProvider\";\nimport Center from \"../components/Center\";\nimport LinkingConfiguration from \"./LinkingConfiguration\";\nimport { AuthStack } from \"./AuthStack\";\nimport { AppTabs } from \"./AppTabs\";\nvar isWeb = Platform.OS === \"web\";\nexport var Routes = function Routes(props) {\n  var _useContext = useContext(AuthContext),\n      user = _useContext.user,\n      login = _useContext.login;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  if (loading) {\n    return React.createElement(Center, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }\n    }, React.createElement(ActivityIndicator, {\n      size: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return React.createElement(NavigationContainer, {\n    linking: LinkingConfiguration,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, user ? React.createElement(AppTabs, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 15\n    }\n  }) : React.createElement(AuthStack, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 29\n    }\n  }));\n};","map":{"version":3,"sources":["C:/Users/rokgr/Desktop/EventPlannerFrontend/navigation/Routes.js"],"names":["NavigationContainer","React","useEffect","useContext","useState","AuthContext","Center","LinkingConfiguration","AuthStack","AppTabs","isWeb","Platform","OS","Routes","props","user","login","loading","setLoading"],"mappings":";;AAAA,SAASA,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,EAAuCC,QAAvC,QAAuD,OAAvD;;;;AAGA,SAASC,WAAT;AACA,OAAOC,MAAP;AACA,OAAOC,oBAAP;AACA,SAASC,SAAT;AACA,SAASC,OAAT;AAEA,IAAMC,KAAK,GAAGC,QAAQ,CAACC,EAAT,KAAgB,KAA9B;AAGA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAW;AAAA,oBACPX,UAAU,CAACE,WAAD,CADH;AAAA,MACvBU,IADuB,eACvBA,IADuB;AAAA,MACjBC,KADiB,eACjBA,KADiB;;AAAA,kBAEDZ,QAAQ,CAAC,KAAD,CAFP;AAAA;AAAA,MAExBa,OAFwB;AAAA,MAEfC,UAFe;;AAmB/B,MAAID,OAAJ,EAAa;AACX,WACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,iBAAD;AAAmB,MAAA,IAAI,EAAC,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AAED,SACE,oBAAC,mBAAD;AAAqB,IAAA,OAAO,EAAEV,oBAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGQ,IAAI,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAiB,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADxB,CADF;AAKD,CAhCM","sourcesContent":["import { NavigationContainer } from \"@react-navigation/native\";\nimport React, { useEffect, useContext, useState } from \"react\";\n\nimport { AsyncStorage, ActivityIndicator, Platform } from \"react-native\";\nimport { AuthContext } from \"../providers/AuthProvider\";\nimport Center from \"../components/Center\";\nimport LinkingConfiguration from \"./LinkingConfiguration\";\nimport { AuthStack } from \"./AuthStack\";\nimport { AppTabs } from \"./AppTabs\";\n\nconst isWeb = Platform.OS === \"web\";\n//const linkingConfiguration = isWeb ? LinkingConfiguration : null;\n\nexport const Routes = (props) => {\n  const { user, login } = useContext(AuthContext);\n  const [loading, setLoading] = useState(false);\n\n  // useEffect(() => {\n  //   //check if the user is logged in or not\n  //   // AsyncStorage.getItem(\"user\")\n  //   // .then(userString => {\n  //   //     if (userString) {\n  //   //         setLoading(false)\n  //   //     } else {\n  //   //         setLoading(true);\n  //   //     }\n  //   // }).catch(err => {\n  //   //     console.log(err);\n  //   //     setLoading(true);\n  //   // });\n  // }, []);\n\n  if (loading) {\n    return (\n      <Center>\n        <ActivityIndicator size=\"large\" />\n      </Center>\n    );\n  }\n\n  return (\n    <NavigationContainer linking={LinkingConfiguration}>\n      {user ? <AppTabs /> : <AuthStack />}\n    </NavigationContainer>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}